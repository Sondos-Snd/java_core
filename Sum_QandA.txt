/* JDK */
It stands for Java Development Kit
It is the tool necessary to compile, document and package Java programs.
It contains JRE + development tools.

/* JVM */
It stands for Java Virtual Machine.
It is an abstract machine. It is a specification that provides a run-time environment in which Java bytecode can be executed.
JVM follows three notations: Specification, Implementation, and Runtime Instance.

/* JRE */
It stands for Java Runtime Environment. 
JRE refers to a runtime environment in which Java bytecode can be executed.
t’s an implementation of the JVM which physically exists.

/*  Explain public static void main(String args[]) in Java. */
/* Why Java is platform independent? */
Java is called platform independent because of its byte codes which can run on any system irrespective of its underlying operating system.

/* . What is the difference between Array list and vector in 
Java? */
Vector is synchronized and thread safe. slow.If an element is inserted into the Array List, it increases
its Array size by 50%. (double for vector). Array List does not define the increment size.Vector can use both Enumeration and
Iterator for traversing. (just iterator for linkedlist).

/* What is the difference between equals() and == in Java? */
Equals() method is defined in Object class. 
“==” or equality operator in Java is a binary operator provided by Java 
programming language and used to compare primitives and objects.

/*  What makes a HashSet different from a TreeSet? */

hashset: It is implemented through a hash table.
It permits the null object.
It is faster than TreeSet especially for search, insert, and delete operations.
It does not maintain elements in an ordered way.
It uses equals() method to compare two objects.
It does not permit a heterogenous object. 

Treeset: TreeSet implements SortedSet Interface that uses trees for storing data.
It uses compareTo() method for comparing two objects.
It permits a heterogenous object.

/*  What are the differences between HashMap and HashTable in 
Java? */
hashmap: It is non synchronized. 
It permits one null key and multiple null values. 
It is traversed through the iterator. uses fail fast iterator.
It inherits AbstractMap class.

hashtable:  It is thread-safe.
It does not permit any null key or value.
It is slower: It is traversed through Enumerator and Iterator.
It inherits Dictionary class.

/* What is the importance of reflection in Java? */
Reflection is a runtime API for inspecting and changing the behavior of 
methods, classes, and interfaces. ava Reflection allows you to analyze classes, interfaces, 
fields, and methods during runtime without knowing what they are called at 
compile time.

/* Contiguous memory locations are usually used for storing actual 
values in an array but not in ArrayList. Explain. */
An array generally contains elements of the primitive data types such as int, 
float, etc. In such cases, the array directly stores these elements at contiguous 
memory locations. While an ArrayList does not contain primitive data types. An 
arrayList contains the reference of the objects at different memory locations 
instead of the object itself. That is why the objects are not stored at contiguous 
memory locations.

/* . How is the creation of a String using new() different from that of 
a literal? */When we create a string using new(), a new object is created. Whereas, if we 
create a string using the string literal syntax, it may return an already existing 
object with the same name.

/*  Explain the term “Double Brace Initialization” in Java? */
Double Brace Initialization is a Java term that refers to the combination of two 
independent processes. There are two braces used in this. The first brace 
creates an anonymous inner class. The second brace is an initialization block. 
When these both are used together, it is known as Double Brace Initialization. 
The inner class has a reference to the enclosing outer class, generally using the
‘this’ pointer. It is used to do both creation and initialization in a single 
statement. It is generally used to initialize collections. It reduces the code and 
also makes it more readable.

/* . Why is it said that the length() method of String class doesn’t 
return accurate results? */
 code points outside of the BMP (Basic Multilingual Plane), that is, 
code points having a value of U+10000 or above, will be ignored.

/* . What are the differences between Heap and Stack Memory in 
Java? */
stack:  used only by one thread of execution. Exists until the end of execution of the
thread. Follows LIFO manner to free memory. Stack memory only contains local
primitive and reference variables to objects in heap space.

heap: Heap memory is used by all the parts of the application. 
Objects stored in the heap are globally accessible. Whenever an object is created, it’s
always stored in the Heap space.

/* What is JIT compiler in Java? */
JIT stands for Just-In-Time compiler in Java. It is a program that helps in 
converting the Java bytecode into instructions that are sent directly to the 
processor.
Once the method has been compiled, the JVM summons the 
compiled code of that method directly rather than interpreting it. 

/*  What is an object in Java and how is it created? */
An object is a real-world entity that has a state and behavior. An object has
three characteristics:
1. State
2. Behavior
3. Identity
An object is created using the ‘new’ keyword.

/*  What is Java String Pool? */
Java String pool refers to a collection of Strings which are stored in heap
memory. In this, whenever a new object is created, String pool first checks
whether the object is already present in the pool or not.

/*  Difference between String, StringBuilder, and StringBuffer.*/
string:  String Pool, Immutable. thread safe.
string builber: Heap Area. mutable.not thread safe.
string buffer: same as builder, less efficient, thread safe.

/* What is a classloader in Java? */
The Java ClassLoader is a subset of JVM (Java Virtual Machine) that is 
responsible for loading the class files.
built-in classloaders:
1. Bootstrap ClassLoader
2. Extension ClassLoader
3. System/Application classloader

/* . What is the difference between an array and an array list? */
array: 

/* What is a Map in Java? */

/* What is collection class in Java? */

/* What is Polymorphism? */

/* . What is runtime polymorphism or dynamic method dispatch? */

/* What is abstraction in Java? */

/*  What is the difference between abstract classes and interfaces? */

/*  What are the different types of inheritance in Java? */

/*  What is method overloading and method overriding? */

/* . What is an association? */

/* What do you mean by aggregation? */

/* What is composition in Java? */

/* What is a marker interface? */

/* What is object cloning in Java? */

/* What is a copy constructor in Java? */

/*  What is a constructor overloading in Java? */

/* . What is a servlet? */

/*  What is Request Dispatcher? */

/* What are the differences between forward() method and
sendRedirect() methods? */

/* What is the life-cycle of a servlet? */

/* How does cookies work in Servlets? */

/* What are the differences between ServletContext vs
ServletConfig? */

/* What are the different methods of session management in
servlets? */

/* What is JDBC Driver? */

/* What are the steps to connect to a database in java? */

/* What are the JDBC API components? */

/* What is the role of JDBC DriverManager class? */

/*  What is JDBC Connection interface? */

/* What is the purpose of JDBC ResultSet interface? */

/*  What is JDBC ResultSetMetaData interface? */

/* What is JDBC DatabaseMetaData interface? */

/* . What do you mean by batch processing in JDBC? */

/* . What is the difference between execute, executeQuery,
executeUpdate? */

/* . What do you understand by JDBC Statements? */

/*  What is Spring? */

/* Name the different modules of the Spring framework */

/*  List some of the important annotations in annotation-based
Spring configuration. */

/*  Explain Bean in Spring and List the different Scopes of Spring
bean. */

/*  Explain the role of DispatcherServlet and ContextLoaderListener */

/* . What are the differences between constructor injection and setter
injection? */

/*  What is autowiring in Spring? What are the autowiring modes? */

/* How to handle exceptions in Spring MVC Framework? */

/*  What are some of the important Spring annotations which you
have used? */

/*  How to integrate Spring and Hibernate Frameworks? */

/* . Name the types of transaction management that Spring 
supports. */

/* What is Hibernate Framework? */

/* 2. What are the important benefits of using Hibernate Framework? */

/*  Explain Hibernate architecture. */

/*  What are the differences between get and load methods? */

/* What are the advantages of Hibernate over JDBC? */

/*  What are the life-cycle methods for a jsp? */

/*  What are the JSP implicit objects? */

/* What are the differences between include directive and include
action? */

/* How to disable caching on back button of the browser? */

/* . What are the different tags provided in JSTL? */

/*  How to disable session in JSP? */

/* How to delete a Cookie in a JSP? */

/*  Explain the jspDestroy() method. */

/*  How is JSP better than Servlet technology? */

/* Why should we not configure JSP standard tags in web.xml? */

/*  How will you use JSP EL in order to get the HTTP method name? */

/*  What is the difference between Error and Exception? */

/* How can you handle Java exceptions? */

/* What are the differences between Checked Exception and
Unchecked Exception? */

/*  What are the different ways of thread usage? */

/* Will the finally block get executed when the return statement is 
written at the end of try block and catch block as shown below? */

/* . How does an exception propagate in the code? */

/* Can you explain the Java thread lifecycle? */

/* What purpose do the keywords final, finally, and finalize fulfill? */

/*  What are the differences between throw and throws? */

/* What is exception hierarchy in java? */

/* How to create a custom Exception? */

/* . What are the important methods of Java Exception Class? */

/*  What are the differences between processes and threads? */

/* What is a finally block? Is there a case when finally will not
execute? */

/* . What is synchronization? */

/* . What is OutOfMemoryError in Java? */

/*  What is a Thread? */

/*  What are the two ways to create a thread? */

/* . What are the different types of garbage collectors in Java? */