/* JDK */
It stands for Java Development Kit
It is the tool necessary to compile, document and package Java programs.
It contains JRE + development tools.

/* JVM */
It stands for Java Virtual Machine.
It is an abstract machine. It is a specification that provides a run-time environment in which Java bytecode can be executed.
JVM follows three notations: Specification, Implementation, and Runtime Instance.

/* JRE */
It stands for Java Runtime Environment. 
JRE refers to a runtime environment in which Java bytecode can be executed.
t’s an implementation of the JVM which physically exists.

/*  Explain public static void main(String args[]) in Java. */
/* Why Java is platform independent? */
Java is called platform independent because of its byte codes which can run on any system irrespective of its underlying operating system.

/* . What is the difference between Array list and vector in 
Java? */
Vector is synchronized and thread safe. slow.If an element is inserted into the Array List, it increases
its Array size by 50%. (double for vector). Array List does not define the increment size.Vector can use both Enumeration and
Iterator for traversing. (just iterator for linkedlist).

/* What is the difference between equals() and == in Java? */
Equals() method is defined in Object class. 
“==” or equality operator in Java is a binary operator provided by Java 
programming language and used to compare primitives and objects.

/*  What makes a HashSet different from a TreeSet? */

hashset: It is implemented through a hash table.
It permits the null object.
It is faster than TreeSet especially for search, insert, and delete operations.
It does not maintain elements in an ordered way.
It uses equals() method to compare two objects.
It does not permit a heterogenous object. 

Treeset: TreeSet implements SortedSet Interface that uses trees for storing data.
It uses compareTo() method for comparing two objects.
It permits a heterogenous object.

/*  What are the differences between HashMap and HashTable in 
Java? */
hashmap: It is non synchronized. 
It permits one null key and multiple null values. 
It is traversed through the iterator. uses fail fast iterator.
It inherits AbstractMap class.

hashtable:  It is thread-safe.
It does not permit any null key or value.
It is slower: It is traversed through Enumerator and Iterator.
It inherits Dictionary class.

/* What is the importance of reflection in Java? */
Reflection is a runtime API for inspecting and changing the behavior of 
methods, classes, and interfaces. ava Reflection allows you to analyze classes, interfaces, 
fields, and methods during runtime without knowing what they are called at 
compile time.

/* Contiguous memory locations are usually used for storing actual 
values in an array but not in ArrayList. Explain. */
An array generally contains elements of the primitive data types such as int, 
float, etc. In such cases, the array directly stores these elements at contiguous 
memory locations. While an ArrayList does not contain primitive data types. An 
arrayList contains the reference of the objects at different memory locations 
instead of the object itself. That is why the objects are not stored at contiguous 
memory locations.

/* . How is the creation of a String using new() different from that of 
a literal? */When we create a string using new(), a new object is created. Whereas, if we 
create a string using the string literal syntax, it may return an already existing 
object with the same name.

/*  Explain the term “Double Brace Initialization” in Java? */
Double Brace Initialization is a Java term that refers to the combination of two 
independent processes. There are two braces used in this. The first brace 
creates an anonymous inner class. The second brace is an initialization block. 
When these both are used together, it is known as Double Brace Initialization. 
The inner class has a reference to the enclosing outer class, generally using the
‘this’ pointer. It is used to do both creation and initialization in a single 
statement. It is generally used to initialize collections. It reduces the code and 
also makes it more readable.

/* . Why is it said that the length() method of String class doesn’t 
return accurate results? */
 code points outside of the BMP (Basic Multilingual Plane), that is, 
code points having a value of U+10000 or above, will be ignored.

/* . What are the differences between Heap and Stack Memory in 
Java? */
stack:  used only by one thread of execution. Exists until the end of execution of the
thread. Follows LIFO manner to free memory. Stack memory only contains local
primitive and reference variables to objects in heap space.

heap: Heap memory is used by all the parts of the application. 
Objects stored in the heap are globally accessible. Whenever an object is created, it’s
always stored in the Heap space.

/* What is JIT compiler in Java? */
JIT stands for Just-In-Time compiler in Java. It is a program that helps in 
converting the Java bytecode into instructions that are sent directly to the 
processor.
Once the method has been compiled, the JVM summons the 
compiled code of that method directly rather than interpreting it. 

/*  What is an object in Java and how is it created? */
An object is a real-world entity that has a state and behavior. An object has
three characteristics:
1. State
2. Behavior
3. Identity
An object is created using the ‘new’ keyword.

/*  What is Java String Pool? */
Java String pool refers to a collection of Strings which are stored in heap
memory. In this, whenever a new object is created, String pool first checks
whether the object is already present in the pool or not.

/*  Difference between String, StringBuilder, and StringBuffer.*/
string:  String Pool, Immutable. thread safe.
string builber: Heap Area. mutable.not thread safe.
string buffer: same as builder, less efficient, thread safe.

/* What is a classloader in Java? */
The Java ClassLoader is a subset of JVM (Java Virtual Machine) that is 
responsible for loading the class files.
built-in classloaders:
1. Bootstrap ClassLoader
2. Extension ClassLoader
3. System/Application classloader

/* . What is the difference between an array and an array list? */
arraylist: rraylists can contain only objects, no primitive data types are allowed. Can contain values of different data types.
Size can be dynamically changed

/* What is a Map in Java? */
, Map is an interface of Util package which maps unique keys to values.The Map interface is not a subset of the main Collection interface and thus it
behaves little different from the other collection types. Below are a few of the
characteristics of Map interface:
1. Map doesn’t contain duplicate keys.
2. Each key can map at max one value.

/* What is collection class in Java? */
The hierarchy of the entire collection framework consists of four core interfaces such as Collection, List, Set, Map, 
and two specialized interfaces named SortedSet and SortedMap for sorting.

/* What is Polymorphism? */
 “one interface, many implementations”.
There are two types of polymorphism:
1. Compile time polymorphism
2. Run time polymorphism
Compile time polymorphism is method overloading whereas Runtime time polymorphism is done using inheritance and interface.

/* . What is runtime polymorphism or dynamic method dispatch? */
runtime polymorphism or dynamic method dispatch is a process in which a call to an overridden method is resolved at runtime rather than at
compile-time:
Car b= new Audi(); 

/* What is abstraction in Java? */
the process of hiding the implementation details from the user and revealing only the functionality to them. Abstraction can be achieved in two ways:
1. Abstract Classes (0-100% of abstraction can be achieved)
2. Interfaces (100% of abstraction can be achieved)

/*  What is the difference between abstract classes and interfaces? */
abstract class: In the case of an abstract class, a class may extend only one abstract class. 

interface: A Class may implement several interfaces. An Interface visibility must be public (or) none. An Interface cannot contain constructors
. ( since java 11, u can have default methods ?).

/*  What are the different types of inheritance in Java? */
 Single Inheritance
 multilevel
 hierarchical
 hybrid

/*  What is method overloading and method overriding? */
overloading: compile-time polymorphism. same name, each method must have a different number of parameters or
parameters having different types and order. 

overriding: the same name and exactly the same number and type of parameters and same return type as a superclass.
 run time polymorphism.

/* . What is an association? */
Association is a relationship where all object have their own lifecycle and there is no owner. Let’s take the example of Teacher and Student. Multiple students
can associate with a single teacher and a single student can associate with multiple teachers but there is no ownership between the objects and both have
their own lifecycle. These relationships can be one to one, one to many, many to one and many to many.

/* What do you mean by aggregation? */
An aggregation is a specialized form of Association where all object has their own lifecycle but there is ownership and child object can not belong to another
parent object. Let’s take an example of Department and teacher. A single teacher can not belong to multiple departments, but if we delete the
department teacher object will not destroy.

/* What is composition in Java? */
Composition is again a specialized form of Aggregation and we can call this as a “death” relationship. It is a strong type of Aggregation. Child object does not
have their lifecycle and if parent object deletes all child object will also be deleted. Let’s take again an example of a relationship between House and
rooms. House can contain multiple rooms there is no independent life of room and any room can not belongs to two different houses if we delete the house
room will automatically delete.

/* What is a marker interface? */
empty. Serializable.

/* What is object cloning in Java? */
new object with similar state.clone () creates a new instance of the class of the current object and then initializes all its fields with the exact same contents of
corresponding fields.
the marker interface java.lang.Cloneable must be implemented to avoid any runtime exceptions. One thing you must note is Object clone() is a protected method,
thus you need to override it.

/* What is a copy constructor in Java? */
Copy constructor is a member function that is used to initialize an object usinganother object of the same class
there is no need for copy constructor in Java since all objects are passed by reference

/* . What is a servlet? */
ava Servlet is server-side technologies to extend the capability of web servers by providing support for dynamic response and data persistence.
 The javax.servlet and javax.servlet.http packages provide interfaces and classes for writing our own servlets.
  All servlets must implement the javax.servlet.Servlet interface, which defines servlet lifecycle methods. When implementing a generic service, 
we can extend the GenericServlet class provided with the Java Servlet API. The HttpServlet class provides methods, such as doGet() and 
doPost(), for handling HTTP-specific services.

 Most of the times, web applications are accessed using HTTP protocol and thats why we mostly extend HttpServlet class. 

 /* hat are the differences between Get and Post methods? */
 get: can be bookmarked. idempotent. less secure.

/*  What is Request Dispatcher? */
RequestDispatcher interface is used to forward the request to another resource that can be HTML, JSP or another servlet in same application.
There are two methods defined in this interface:
1.void forward()
2.void include()

/* What are the differences between forward() method and
sendRedirect() methods? */
endRedirect() method sends new request always because it uses the URL bar of the browser.
sendRedirect() method works at client side. ( forward on server)

/* What is the life-cycle of a servlet? */
1. Servlet is loaded
2. Servlet is instantiated
3. Servlet is initialized
4. Service the request
5. Servlet is destroyed

/* How does cookies work in Servlets? */
 Cookies are text data sent by server to the client and it gets saved at the client local machine.
  Servlet API provides cookies support through javax.servlet.http.Cookie class that implements Serializable and Cloneable interfaces.
  • HttpServletRequest getCookies() method is provided to get the array of Cookies from request, since there is no point of adding Cookie to request,
there are no methods to set or add cookie to request.
• Similarly HttpServletResponse addCookie(Cookie c) method is provided to attach cookie in response header, there are no getter methods for cookie.

/* What are the differences between ServletContext vs
ServletConfig? */
servletconfig: an object represent single servlet.local parameter associated with particular servlet. It’s a name value pair defined inside the servlet
section of web.xml file. getServletConfig() . for example shopping cart of a user is a specific to particular user so here we can use 
servlet config.

servletcontext:  It represent whole web application running on particular JVM and common for all the servlet. global parameter associated with whole 
application. ServletContext has application wide scope so define outside of servlet tag in web.xml file. example: session related info.

/* What are the different methods of session management in
servlets? */
Session is a conversational state between client and server and it can consists of multiple request and response between client and server. Since HTTP and
Web Server both are stateless, the only way to maintain a session is when some unique information about the session (session id) is passed between
server and client in every request and response.

Some of the common ways of session management in servlets are:
1. User Authentication
2. HTML Hidden Field
3. Cookies
4. URL Rewriting
5. Session Management API

/* What is JDBC Driver? */
JDBC Driver is a software component that enables java application to interact with the database. There are 4 types of JDBC drivers:
1. JDBC-ODBC bridge driver
2. Native-API driver (partially java driver)
3. Network Protocol driver (fully java driver)
4. Thin driver (fully java driver)

/* What are the steps to connect to a database in java? */
• Registering the driver class
• Creating connection
• Creating statement
• Executing queries
• Closing connection

/* What are the JDBC API components? */
The java.sql package contains interfaces and classes for JDBC API.
Interfaces:
• Connection
• Statement
• PreparedStatement
• ResultSet
• ResultSetMetaData
• DatabaseMetaData
• CallableStatement etc.
Classes:
• DriverManager
• Blob
• Clob
• Types
• SQLException etc.

/* What is the role of JDBC DriverManager class? */
The DriverManager class manages the registered drivers. It can be used to register and unregister drivers. It provides factory method that returns the
instance of Connection.

/*  What is JDBC Connection interface? */
The Connection interface maintains a session with the database. It can be used for transaction management. It provides factory methods that returns the
instance of Statement, PreparedStatement, CallableStatement and DatabaseMetaData.

/* What is the purpose of JDBC ResultSet interface? */
The ResultSet object represents a row of a table. It can be used to change the cursor pointer and get the information from the database.

/*  What is JDBC ResultSetMetaData interface? */
The ResultSetMetaData interface returns the information of table such as total number of columns, column name, column type etc.

/* What is JDBC DatabaseMetaData interface? */
The DatabaseMetaData interface returns the information of the database such as username, driver name, driver version, number of tables, number of views
etc.

/* . What do you mean by batch processing in JDBC? */
Batch processing helps you to group related SQL statements into a batch and execute them instead of executing a single query. 

/* . What is the difference between execute, executeQuery,
executeUpdate? */
Statement execute(String query) is used to execute any SQL query and it returns TRUE if the result is an ResultSet such as running Select queries. The
output is FALSE when there is no ResultSet object such as running Insert or Update queries. We can use getResultSet() to get the ResultSet
and getUpdateCount() method to retrieve the update count.

Statement executeQuery(String query) is used to execute Select queries and returns the ResultSet. ResultSet returned is never null even if there are no
records matching the query. When executing select queries we should use executeQuery method so that if someone tries to execute insert/update
statement it will throw java.sql.SQLException with message “executeQuery method can not be used for update”.

Statement executeUpdate(String query) is used to execute Insert/Update/Delete (DML) statements or DDL statements that returns
nothing. The output is int and equals to the row count for SQL Data Manipulation Language (DML) statements. For DDL statements, the output is 0.

/* . What do you understand by JDBC Statements? */
JDBC statements are basically the statements which are used to send SQL commands to the database and retrieve data back from the database.
1. Statement: Used for general purpose access to the database and executes a static SQL query at runtime.
2. PreparedStatement: Used to provide input parameters to the query during execution.
3. CallableStatement: Used to access the database stored procedures and helps in accepting runtime parameters

/*  What is Spring? */
 Spring is essentially a lightweight, integrated framework that can be used for developing enterprise applications in java.

/* Name the different modules of the Spring framework */
Some of the important Spring Framework modules are:
• Spring Context – for dependency injection.
• Spring AOP – for aspect oriented programming.
• Spring DAO – for database operations using DAO pattern
• Spring JDBC – for JDBC and DataSource support.
• Spring ORM – for ORM tools support such as Hibernate
• Spring Web Module – for creating web applications.
• Spring MVC – Model-View-Controller implementation for creating web applications, web services etc.

/*  List some of the important annotations in annotation-based
Spring configuration. */
• @Required
• @Autowired
• @Qualifier
• @Resource
• @PostConstruct
• @PreDestroy

/*  Explain Bean in Spring and List the different Scopes of Spring
bean. */
Beans are objects that form the backbone of a Spring application. They are managed by the Spring IoC container.
 bean is an object that is instantiated, assembled, and managed by a Spring IoC container.
 
 There are five Scopes defined in Spring beans.
 • Singleton: Only one instance of the bean will be created for each container. This is the default scope for the spring beans. While using this 
scope, make sure spring bean doesn’t have shared instance variables otherwise it might lead to data inconsistency issues because it’s not thread-safe.
• Prototype: A new instance will be created every time the bean is requested.
• Request: This is same as prototype scope, however it’s meant to be used for web applications. A new instance of the bean will be created for 
each HTTP request.
• Session: A new bean will be created for each HTTP session by the container.
• Global-session: This is used to create global session beans for Portlet applications.

/*  Explain the role of DispatcherServlet and ContextLoaderListener */

/* . What are the differences between constructor injection and setter
injection? */

/*  What is autowiring in Spring? What are the autowiring modes? */

/* How to handle exceptions in Spring MVC Framework? */

/*  What are some of the important Spring annotations which you
have used? */

/*  How to integrate Spring and Hibernate Frameworks? */

/* . Name the types of transaction management that Spring 
supports. */

/* What is Hibernate Framework? */

/* 2. What are the important benefits of using Hibernate Framework? */

/*  Explain Hibernate architecture. */

/*  What are the differences between get and load methods? */

/* What are the advantages of Hibernate over JDBC? */

/*  What are the life-cycle methods for a jsp? */

/*  What are the JSP implicit objects? */

/* What are the differences between include directive and include
action? */

/* How to disable caching on back button of the browser? */

/* . What are the different tags provided in JSTL? */

/*  How to disable session in JSP? */

/* How to delete a Cookie in a JSP? */

/*  Explain the jspDestroy() method. */

/*  How is JSP better than Servlet technology? */

/* Why should we not configure JSP standard tags in web.xml? */

/*  How will you use JSP EL in order to get the HTTP method name? */

/*  What is the difference between Error and Exception? */
error: An error is an irrecoverable condition occurring at runtime. Such as OutOfMemory error. These JVM errors you cannot repair them at runtime.
While exceptions are conditions that occur because of bad input or human error etc. e.g. FileNotFoundException will be thrown if the specified file does not
exist. Or a NullPointerException will take place if you try using a null reference. In most of the cases it is possible to recover from an exception (probably by
giving the user feedback for entering proper values etc.

/* How can you handle Java exceptions? */
1. try
2. catch
3. finally
4. throw
5. throws

/* What are the differences between Checked Exception and
Unchecked Exception? */
checked: The classes that extend Throwable class except RuntimeException and Error are known as checked exceptions. checked at compile-time.: IOException, SQLException etc
unchecked: extend RuntimeException. ArithmeticException, NullPointerException.

/* Will the finally block get executed when the return statement is 
written at the end of try block and catch block as shown below? */
There are only a few situations in which the finally block does not execute, such as VM crash, power failure, software crash, etc. If 
you don’t want to execute the finally block, you need to call the System.exit()  method explicitly in the finally block.

/* . How does an exception propagate in the code? */
If an exception is not caught, it is thrown from the top of the stack and falls 
down the call stack to the previous procedure. 

/* Can you explain the Java thread lifecycle? */
New, Runnable, Waiting, Terminated

/* What purpose do the keywords final, finally, and finalize fulfill? */
final: Final is used to apply restrictions on class, method, and variable. A final class
can’t be inherited, final method can’t be overridden and final variable value can’t be changed. 

finally: Finally is used to place important code, it will be executed whether the
exception is handled or not. 

finalize: Finalize is used to perform clean up processing just before the object is garbage
collected. 

/*  What are the differences between throw and throws? */
throw: Checked exceptions can not be propagated with throw only.You cannot throw multiple exception. Throw is followed by an instance.
throws: Throws is used to declare an exception. Checked exception can be propagated with throws. Throws is followed by class. Throws is used with the method signature.

/* What is exception hierarchy in java? */
Throwable (class)
exception ( checked, uncheked) + error (virtual machine, assertion)

/* How to create a custom Exception? */
 class New1Exception extends Exception { }

/* . What are the important methods of Java Exception Class? */
Methods are defined in the base class Throwable. Some of the important methods of Java exception class are stated below.
1. String getMessage() – This method returns the message String about the exception. The message can be provided through its constructor.
2. public StackTraceElement[] getStackTrace() – This method returns an array containing each element on the stack trace. The element at
index 0 represents the top of the call stack whereas the last element in the array represents the method at the bottom of the call stack.
3. Synchronized Throwable getCause() – This method returns the cause of the exception or null id as represented by a Throwable object.
4. String toString() – This method returns the information in String format. The returned String contains the name of Throwable class and localized
message.
5. void printStackTrace() – This method prints the stack trace information to the standard error stream.

/*  What are the differences between processes and threads? */
thread is subset of process, which is run by operating system and which only exercice control over child processes and run in seperate memory spaces.

/* What is a finally block? Is there a case when finally will not execute? */
Finally block is a block which always executes a set of statements. It is alwaysassociated with a try block regardless of any exception that occurs or not.
Yes, finally will not be executed if the program exits either by calling System.exit() or by causing a fatal error that causes the process to abort.

/* . What is synchronization? */
Synchronization refers to multi-threading.A synchronized block of code can be executed by only one thread at a time.

/* . What is OutOfMemoryError in Java? */
OutOfMemoryError is the subclass of java.lang.Error which generally occurs 
when our JVM runs out of memory.

/*  What is a Thread? */
A thread is the smallest piece of programmed instructions which can be
executed independently by a scheduler. 

/*  What are the two ways to create a thread? */
• By implementing the Runnable interface.  the class must implement the public void run() 
• By extending the Thread: This creates a thread by creating an instance of a new class that extends the 
Thread class. The extending class must override the run() function, which is the thread’s entry point.

/* . What are the different types of garbage collectors in Java? */
Javaprovides four types of garbage collectors:
• Serial Garbage Collector
• Parallel Garbage Collector
• CMS Garbage Collector
• G1 Garbage Collector

/* Java works as “pass by value” or “pass by reference” phenomenon? */
Java is always pass-by-value. This means that it creates a copy of the contents 
of the parameter in memory. In Java, object variables always refer to the memory heap’s real object.
